/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package scnw;

import com.intellij.psi.tree.IElementType;
import scnw.psi.Types;
import com.intellij.psi.TokenType;
import com.intellij.lexer.FlexLexer;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>SmartCase.flex</tt>
 */
class SmartCaseLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int INNER_COMMENT = 4;
  public static final int PROCESS = 6;
  public static final int TEST = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [13, 6, 2]
   * Total runtime size is 23512 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>8]<<6)|((ch>>2)&0x3f)]<<2)|(ch&0x3)];
  }

  /* The ZZ_CMAP_Z table has 4352 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\1\1\21\1\22\1\23\1\1\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\1\1\34"+
    "\1\35\1\36\2\37\1\40\7\37\1\41\1\42\1\43\1\37\1\44\1\45\2\37\31\1\1\46\121"+
    "\1\1\47\4\1\1\50\1\1\1\51\1\52\1\53\1\54\1\55\1\56\53\1\1\57\41\37\1\1\1\60"+
    "\1\61\1\1\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\3\37\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112"+
    "\1\37\1\113\1\37\1\114\3\37\3\1\1\115\1\116\1\117\12\37\4\1\1\120\17\37\2"+
    "\73\1\121\41\37\2\1\1\122\1\123\3\37\1\124\27\73\1\125\2\73\1\126\45\37\1"+
    "\127\13\37\1\130\24\37\1\131\1\132\1\37\1\133\1\134\1\135\1\136\2\37\1\137"+
    "\5\37\1\140\7\37\1\141\1\142\4\37\1\143\2\37\1\144\16\37\246\1\1\145\20\1"+
    "\1\146\1\147\25\73\1\150\51\37\2\1\1\151\u0b05\37\1\152\1\153\u02fe\37");

  /* The ZZ_CMAP_Y table has 6912 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\2\0\1\1\1\2\3\0\1\3\1\4\1\5\1\3\1\6\2\7\1\10\1\11\1\12\5\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\0\1\26\6\0\1\27\1\30\1\31\1\32\1\3\1"+
    "\33\1\31\1\3\5\13\1\14\7\13\1\14\162\13\1\34\1\35\2\13\1\34\3\3\1\13\1\36"+
    "\1\3\1\37\4\3\34\7\1\13\1\40\1\35\1\41\1\3\1\31\1\14\1\40\4\13\1\42\24\13"+
    "\1\42\42\13\1\43\1\7\1\44\47\13\2\45\1\12\10\13\1\14\1\33\1\3\1\12\11\13\1"+
    "\3\1\46\1\47\12\7\1\50\1\51\1\50\2\3\6\13\1\14\1\3\1\14\3\3\1\0\1\52\1\46"+
    "\1\3\2\7\1\53\1\3\12\13\1\54\7\7\1\55\1\35\1\56\30\13\1\57\1\7\1\60\1\7\1"+
    "\61\1\62\1\63\2\7\1\63\1\64\3\3\1\65\1\66\7\13\6\7\1\53\1\12\25\13\1\67\2"+
    "\7\1\70\3\3\2\7\1\63\7\13\1\54\2\7\1\34\1\31\1\3\5\13\1\67\1\71\2\7\2\72\1"+
    "\55\4\3\6\13\1\72\21\3\1\73\2\13\1\74\1\45\1\75\1\45\1\76\5\3\3\45\1\77\6"+
    "\7\1\100\1\7\15\13\1\67\1\101\4\7\1\72\1\7\2\13\1\67\1\102\2\7\1\12\1\13\1"+
    "\103\1\13\1\104\1\12\1\13\2\64\5\13\1\40\1\13\1\37\1\35\1\34\1\101\1\7\2\105"+
    "\1\106\1\3\1\107\1\3\1\42\1\67\1\102\2\7\1\110\1\3\1\46\1\3\1\47\1\12\1\14"+
    "\1\111\1\64\5\13\1\40\1\13\1\40\1\112\1\34\1\62\1\53\1\107\1\105\1\55\1\113"+
    "\1\3\1\12\1\37\1\3\1\102\2\7\1\63\1\114\2\3\1\47\1\12\1\13\2\42\5\13\1\40"+
    "\1\13\1\40\1\12\1\34\1\101\1\7\2\50\1\55\1\36\3\3\1\67\1\102\2\7\1\115\1\3"+
    "\1\116\1\3\1\47\1\12\1\13\2\64\5\13\1\40\1\13\1\40\1\12\1\34\1\101\1\7\2\105"+
    "\1\55\1\3\1\102\1\3\1\42\1\67\1\102\2\7\1\33\3\3\1\117\1\12\1\14\1\35\1\40"+
    "\1\34\1\112\1\40\1\111\1\36\1\14\1\35\2\13\1\34\1\102\1\53\1\102\1\62\1\55"+
    "\1\36\1\107\3\3\1\102\2\7\2\3\1\115\1\3\1\104\1\12\1\13\2\40\5\13\1\40\2\13"+
    "\1\103\1\34\1\57\1\7\2\62\1\55\1\3\1\51\1\120\1\3\1\67\1\102\2\7\4\3\1\121"+
    "\1\12\1\13\2\40\5\13\1\40\2\13\1\12\1\34\1\101\1\7\2\62\1\55\1\3\1\51\1\3"+
    "\1\31\1\67\1\102\2\7\1\112\3\3\1\122\1\12\1\13\2\40\11\13\1\14\1\57\1\7\2"+
    "\62\1\106\1\3\1\123\1\3\1\124\1\67\1\102\2\7\2\3\1\35\1\13\1\102\1\12\3\13"+
    "\1\14\1\35\5\13\1\42\2\13\1\33\1\13\1\14\1\125\1\107\1\7\1\126\2\7\1\3\1\127"+
    "\2\45\1\102\3\3\1\12\13\13\1\66\1\7\1\53\1\46\1\13\1\54\1\7\1\53\2\7\1\55"+
    "\11\3\1\112\1\64\1\37\1\33\1\3\1\13\1\12\1\13\1\12\1\130\1\35\1\12\1\66\1"+
    "\7\1\50\1\70\1\13\1\37\1\7\1\55\2\7\1\55\1\13\10\3\1\36\5\3\1\55\1\3\2\7\1"+
    "\55\2\3\1\131\1\113\1\102\2\13\1\12\10\13\1\36\1\47\4\7\1\62\1\13\1\72\2\7"+
    "\1\47\10\7\1\132\1\3\1\125\16\3\12\13\1\54\4\7\1\133\2\7\1\55\1\3\1\13\1\67"+
    "\1\63\1\67\1\101\1\61\1\7\1\63\1\72\1\56\2\13\1\67\2\7\1\71\3\7\1\55\11\13"+
    "\1\42\1\3\1\33\12\13\1\14\23\13\1\40\1\34\1\13\1\14\1\40\1\34\12\13\1\40\1"+
    "\34\10\13\1\40\1\34\1\13\1\14\1\40\1\34\3\13\1\14\16\13\1\40\1\34\20\13\1"+
    "\14\1\47\10\3\4\13\4\3\25\13\1\134\1\45\1\76\1\12\132\13\1\64\4\13\1\12\5"+
    "\13\1\14\1\3\22\13\1\14\1\35\1\74\1\45\1\135\1\3\3\13\1\40\1\67\1\132\2\3"+
    "\4\13\1\67\1\132\2\3\4\13\1\67\3\3\3\13\1\40\1\136\3\3\15\13\10\7\1\111\1"+
    "\46\1\114\2\7\1\55\7\3\1\107\1\55\2\7\1\55\1\3\26\13\2\3\12\13\1\137\1\3\21"+
    "\13\1\34\2\3\7\13\1\140\3\7\1\3\3\7\2\3\1\102\2\7\7\13\1\34\1\13\1\36\2\3"+
    "\13\13\1\3\4\7\1\56\1\13\1\55\1\3\2\7\1\55\11\3\5\13\1\54\1\7\1\3\15\13\1"+
    "\72\1\7\1\53\7\7\1\105\2\7\1\55\1\3\2\7\1\55\2\3\1\111\2\3\3\45\1\141\20\3"+
    "\1\7\1\56\13\13\4\7\1\56\1\13\1\3\2\7\1\55\3\3\1\107\2\7\3\3\1\133\7\13\1"+
    "\72\2\7\1\63\2\7\1\63\12\13\1\67\3\7\3\3\11\13\5\7\2\3\2\7\1\55\1\12\2\7\1"+
    "\63\10\13\1\34\2\45\1\135\21\3\1\53\5\7\1\56\1\66\1\67\1\142\1\76\1\3\60\13"+
    "\11\7\1\100\3\45\1\76\1\124\1\7\5\13\1\34\1\13\1\34\11\13\1\34\1\13\1\34\2"+
    "\13\2\130\7\13\1\34\15\13\1\40\1\13\1\37\1\35\1\40\1\13\1\36\1\13\1\35\1\13"+
    "\1\3\3\13\1\36\1\35\1\40\1\13\1\36\2\3\1\65\1\0\6\3\1\143\1\144\3\3\1\111"+
    "\1\36\4\3\1\36\2\3\1\0\1\52\1\145\1\0\1\33\2\3\1\111\4\3\3\13\1\36\6\146\1"+
    "\147\5\3\3\7\1\150\1\151\1\104\2\7\1\132\3\3\1\31\1\111\1\35\2\13\1\33\1\12"+
    "\1\34\1\3\1\37\1\40\1\42\2\13\1\34\1\13\1\3\1\12\1\34\1\31\4\3\12\13\1\36"+
    "\212\3\1\127\14\45\1\76\5\3\13\13\1\14\13\13\1\14\41\13\1\36\1\111\1\54\1"+
    "\63\3\3\11\13\1\42\1\3\1\33\16\13\1\3\1\111\3\3\1\107\5\13\1\14\2\3\1\13\1"+
    "\14\1\13\1\14\1\13\1\14\1\13\1\14\1\13\1\14\1\13\1\14\1\13\1\14\1\13\1\14"+
    "\10\7\13\3\1\111\65\3\1\12\6\3\1\12\1\13\1\67\1\7\1\12\1\34\1\13\1\36\1\12"+
    "\24\13\1\14\1\51\2\12\25\13\1\14\1\13\1\3\1\12\11\13\1\34\1\12\26\13\1\14"+
    "\4\3\6\13\1\14\15\3\61\13\1\34\22\3\63\13\1\74\1\45\1\76\12\3\43\13\1\36\20"+
    "\3\13\13\1\34\3\13\1\36\4\13\2\7\1\63\5\3\13\13\1\54\1\141\2\7\1\152\6\13"+
    "\1\45\1\123\24\13\1\55\10\3\1\111\2\13\1\35\31\13\1\64\1\153\1\13\3\45\2\13"+
    "\1\153\1\141\2\45\17\3\1\124\2\13\2\154\1\54\5\13\1\54\1\7\4\3\1\5\1\3\15"+
    "\13\3\3\1\63\14\13\4\7\1\155\2\3\2\7\1\55\1\3\4\7\1\63\1\13\1\111\1\116\2"+
    "\7\1\63\6\13\1\67\1\7\1\55\5\13\1\54\3\7\3\3\7\13\1\36\1\7\13\13\1\54\3\7"+
    "\1\132\2\3\1\111\2\7\1\55\1\3\7\45\1\141\12\13\1\72\2\7\1\53\2\3\1\54\2\13"+
    "\1\55\2\7\1\55\1\3\5\13\1\14\1\156\1\45\14\13\1\101\1\61\1\56\1\67\1\137\5"+
    "\3\1\111\1\34\2\13\1\54\1\7\1\35\1\157\2\3\1\12\1\14\1\12\1\14\1\12\1\14\2"+
    "\3\1\13\1\14\1\13\1\14\12\45\1\141\2\45\1\76\2\3\24\45\10\13\1\54\1\7\1\53"+
    "\1\55\2\7\1\55\1\3\51\13\3\3\5\13\1\14\1\111\14\13\1\3\33\13\1\34\32\13\1"+
    "\34\11\3\1\13\1\14\2\3\1\111\1\13\1\3\1\160\2\13\1\40\2\13\1\14\1\13\1\37"+
    "\1\42\1\40\32\13\1\34\7\3\1\111\32\13\1\34\4\3\20\13\1\35\15\13\12\3\3\13"+
    "\1\5\4\7\4\3\1\7\1\100\2\45\1\111\1\36\5\3\1\12\6\3\1\115\1\3\1\13\1\40\41"+
    "\13\1\161\1\3\1\5\2\3\2\7\1\55\1\3\1\12\5\13\1\14\1\111\1\12\5\13\1\14\2\3"+
    "\1\35\25\13\1\14\1\35\1\13\1\35\1\13\1\35\1\13\1\35\1\36\1\30\1\162\4\3\1"+
    "\163\1\3\3\13\1\12\5\13\1\14\4\13\1\14\1\42\3\13\1\34\3\13\1\34\10\3\36\13"+
    "\1\14\21\3\15\13\1\36\41\3\1\113\40\3\7\13\1\36\14\13\1\36\3\3\1\135\7\3\7"+
    "\13\1\153\4\3\6\13\1\14\1\3\12\45\1\141\1\3\7\13\1\34\11\13\1\3\2\13\1\12"+
    "\1\34\12\3\47\13\1\34\2\7\1\55\1\3\11\45\1\3\11\45\1\3\12\45\2\3\15\45\47"+
    "\3\115\45\1\141\2\3\5\45\1\76\2\3\2\45\46\3\1\13\1\34\1\40\12\13\1\42\1\36"+
    "\1\64\5\13\1\34\2\3\5\45\1\141\2\3\7\45\1\141\20\3\4\45\1\141\1\76\2\3\5\13"+
    "\1\34\2\3\6\13\1\34\21\3\16\13\1\3\1\35\20\3\1\72\1\51\1\3\1\7\1\13\2\12\6"+
    "\13\1\3\1\53\1\107\10\3\7\13\1\36\7\45\1\135\10\3\2\45\1\164\6\45\1\141\6"+
    "\3\15\13\1\34\2\3\5\13\1\34\2\3\4\13\1\14\3\3\4\45\1\76\33\3\22\13\1\36\15"+
    "\3\14\45\1\141\3\3\14\45\1\141\3\3\1\133\15\13\3\7\1\53\7\3\1\102\2\7\3\3"+
    "\1\124\1\133\13\13\2\7\1\53\1\32\4\3\6\13\1\36\1\3\2\7\1\55\1\3\1\133\10\13"+
    "\1\54\3\7\1\62\2\7\4\3\11\45\1\165\2\3\1\133\13\13\1\54\3\7\1\56\1\36\1\127"+
    "\1\135\2\7\1\166\1\135\10\3\4\45\1\77\11\45\1\3\1\165\20\3\1\45\1\141\1\75"+
    "\1\77\3\45\1\77\2\45\1\135\1\3\16\45\1\141\1\3\2\45\1\76\1\3\1\45\1\164\1"+
    "\45\2\167\5\45\1\75\1\45\1\75\1\164\1\76\2\45\2\167\1\76\1\135\1\124\1\3\1"+
    "\164\1\45\1\127\1\45\1\135\1\45\1\135\42\3\22\45\1\141\1\3\2\45\1\76\11\3"+
    "\21\45\1\77\2\3\2\45\1\76\51\3\15\45\1\76\2\45\1\135\5\3\1\45\1\76\10\3\20"+
    "\45\2\135\2\3\2\45\1\76\11\3\12\13\1\54\3\7\2\3\2\7\1\55\15\3\6\45\1\76\1"+
    "\164\3\45\1\3\2\45\1\76\131\3\22\45\1\76\4\3\1\124\60\3\16\45\1\135\1\3\2"+
    "\45\1\75\12\45\1\141\2\45\1\135\3\3\2\45\1\76\5\3\1\127\7\45\1\127\5\45\1"+
    "\164\2\45\1\141\22\3\33\13\1\153\12\45\1\76\31\3\30\13\1\153\2\45\1\141\4"+
    "\3\61\45\57\3\13\13\1\14\64\3\21\45\1\141\56\3\16\13\1\36\1\3\7\45\1\141\2"+
    "\45\1\76\31\3\7\45\1\76\1\45\1\135\2\3\15\45\1\141\2\3\1\45\3\3\2\45\1\76"+
    "\1\3\1\124\5\45\1\3\1\164\4\45\34\3\21\13\1\36\2\3\1\72\12\7\1\53\3\3\1\107"+
    "\1\133\3\13\20\3\1\135\7\3\73\45\1\135\4\3\74\45\1\141\3\3\1\34\77\3\32\45"+
    "\1\141\1\3\3\45\1\135\2\45\1\135\1\3\2\45\1\76\1\170\61\3\1\47\1\55\1\47\1"+
    "\171\1\0\1\172\1\7\1\53\1\47\1\7\7\3\1\102\1\55\44\3\1\102\1\132\56\3\25\13"+
    "\1\40\21\13\1\40\1\31\1\112\1\12\1\40\2\13\1\42\1\12\1\13\1\12\17\13\1\42"+
    "\1\14\1\12\1\13\1\40\1\13\1\40\6\13\1\42\1\14\1\13\1\37\1\35\1\13\1\40\124"+
    "\13\1\34\6\13\1\40\5\13\1\14\7\13\1\14\6\13\1\40\7\13\1\40\5\13\1\14\7\13"+
    "\1\14\6\13\1\40\7\13\1\40\5\13\1\14\2\13\1\102\14\7\15\45\1\141\1\124\14\45"+
    "\1\135\1\3\1\116\3\3\1\135\4\3\1\124\1\45\1\164\3\45\24\3\1\45\1\141\4\45"+
    "\1\167\1\45\1\77\1\75\1\141\65\3\61\45\1\135\2\3\1\45\1\141\12\3\22\45\1\141"+
    "\1\3\2\45\1\76\51\3\1\13\1\12\6\13\1\112\1\64\1\12\1\13\1\14\1\13\1\130\1"+
    "\3\1\31\1\111\1\130\1\12\1\112\1\64\2\130\1\112\1\64\1\14\1\13\1\14\1\13\1"+
    "\12\1\37\2\13\1\42\4\13\1\3\2\12\1\42\4\13\35\3\6\45\1\76\1\3\6\45\1\76\1"+
    "\3\6\45\1\76\35\3\65\13\1\14\12\3\15\13\1\36\2\3\67\13\1\34\140\45\1\76\27"+
    "\3\7\13\1\34\70\3\1\32\7\3\30\0\40\3\74\7\4\3");

  /* The ZZ_CMAP_A table has 492 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\5\25\1\1\1\2\1\1\1\2\1\1\2\25\4\0\1\31\1\0\1\27\1\0\1\24\5\0\1\34\1\7\6\33"+
    "\1\0\1\6\1\0\1\5\3\0\12\32\1\0\1\10\2\0\1\32\1\0\1\20\1\32\1\14\1\32\1\15"+
    "\1\22\4\32\1\21\1\32\1\23\1\32\1\13\1\11\1\32\1\12\1\16\1\17\6\32\1\3\1\0"+
    "\1\4\1\0\2\25\1\26\2\25\2\0\4\24\4\0\1\32\2\0\1\25\3\0\1\32\2\0\2\32\4\0\3"+
    "\32\3\0\1\32\1\0\1\32\1\0\1\32\1\0\4\32\1\0\1\30\2\32\1\0\3\32\1\0\1\33\2"+
    "\30\2\32\4\30\3\0\1\24\1\0\5\33\1\0\1\33\1\0\2\33\1\0\1\25\3\0\3\33\1\0\3"+
    "\32\3\33\2\0\1\33\3\32\1\0\1\32\3\33\1\25\1\0\2\33\2\32\2\33\1\0\4\33\3\32"+
    "\2\0\1\32\3\0\1\25\1\32\1\33\4\32\3\33\1\32\2\0\2\33\1\32\1\33\1\32\3\33\1"+
    "\32\1\30\3\32\4\30\1\0\4\30\2\0\2\30\1\0\1\30\3\33\1\30\1\33\1\32\2\33\2\0"+
    "\2\33\1\30\3\32\1\30\4\33\2\0\3\33\1\32\4\0\1\33\2\32\2\24\3\0\1\32\1\0\2"+
    "\32\2\0\1\33\2\0\1\32\1\33\3\0\1\24\3\0\1\30\4\0\1\33\3\32\1\30\1\0\2\30\2"+
    "\33\1\0\1\30\2\33\3\30\1\33\3\0\1\30\2\0\1\33\1\0\1\33\1\0\1\33\3\0\2\30\1"+
    "\0\1\32\1\0\1\32\1\0\1\33\1\0\2\33\3\0\3\33\2\32\1\30\2\0\1\30\3\0\1\32\1"+
    "\0\2\33\1\32\1\33\1\32\1\0\1\32\2\30\1\0\3\30\1\0\1\33\2\32\1\0\2\1\5\25\3"+
    "\0\2\25\7\24\1\0\1\33\4\30\1\33\2\30\2\33\1\0\4\32\1\30\2\32\1\33\1\32\1\33"+
    "\1\30\4\0\1\32\1\33\1\32\2\33\2\0\1\32\1\33\2\32\2\0\1\25\1\0\2\24\2\0\3\25"+
    "\1\0\3\30\2\0\1\30\1\0\2\33\1\30\1\0\1\30\2\0\1\30\1\0\2\30\1\0\3\33\4\25"+
    "\1\33");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\2\7\1\1\2\10\2\11\1\1\2\7\1\12\1\13"+
    "\1\7\2\0\1\14\1\0\1\15\4\7\1\16\4\7"+
    "\1\17\1\20\1\21\2\7\1\22";

  private static int [] zzUnpackAction() {
    int [] result = new int[45];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\35\0\72\0\127\0\164\0\221\0\256\0\221"+
    "\0\221\0\221\0\221\0\313\0\350\0\u0105\0\u0122\0\u013f"+
    "\0\u015c\0\u0179\0\u0196\0\u01b3\0\u01d0\0\u01ed\0\221\0\221"+
    "\0\u020a\0\u0227\0\u0122\0\221\0\u0244\0\221\0\u0261\0\u027e"+
    "\0\u029b\0\u02b8\0\221\0\u02d5\0\u02f2\0\u030f\0\u032c\0\u0105"+
    "\0\u0105\0\u0105\0\u0349\0\u0366\0\u0105";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[45];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\2\7\1\10\1\11\1\12\1\13\1\14\1\6"+
    "\1\15\13\16\1\6\1\7\1\17\1\6\1\7\1\16"+
    "\2\6\1\20\1\21\1\7\5\20\1\6\15\20\1\21"+
    "\2\20\1\21\3\20\1\22\1\23\1\7\5\22\1\6"+
    "\15\22\1\23\2\22\1\23\3\22\1\6\2\7\1\10"+
    "\1\11\1\12\1\13\1\24\1\6\6\16\1\25\2\16"+
    "\1\26\2\16\1\6\1\7\1\17\1\6\1\7\1\16"+
    "\3\6\2\7\1\10\1\27\1\12\1\13\2\6\14\16"+
    "\1\6\1\7\1\17\1\6\1\7\1\16\2\6\36\0"+
    "\2\7\23\0\1\7\2\0\1\7\12\0\1\30\36\0"+
    "\1\16\1\31\14\16\3\0\2\16\12\0\16\16\3\0"+
    "\2\16\10\0\1\32\1\0\13\33\3\0\1\34\1\33"+
    "\1\35\2\33\1\32\2\20\1\0\5\20\1\0\25\20"+
    "\1\21\1\7\5\20\1\0\15\20\1\21\2\20\1\21"+
    "\3\20\2\22\1\0\5\22\1\0\25\22\1\23\1\7"+
    "\5\22\1\0\15\22\1\23\2\22\1\23\3\22\7\0"+
    "\1\36\36\0\4\16\1\37\2\16\1\40\6\16\3\0"+
    "\2\16\12\0\1\16\1\41\14\16\3\0\2\16\12\0"+
    "\2\16\1\42\13\16\3\0\2\16\10\0\1\32\1\0"+
    "\13\32\3\0\1\43\1\32\1\0\3\32\11\0\13\35"+
    "\3\0\1\34\4\35\12\0\5\16\1\44\10\16\3\0"+
    "\2\16\12\0\5\16\1\45\10\16\3\0\2\16\12\0"+
    "\2\16\1\46\13\16\3\0\2\16\12\0\3\16\1\47"+
    "\12\16\3\0\2\16\12\0\6\16\1\50\7\16\3\0"+
    "\2\16\12\0\10\16\1\51\5\16\3\0\2\16\12\0"+
    "\12\16\1\52\3\16\3\0\2\16\12\0\4\16\1\53"+
    "\11\16\3\0\2\16\12\0\5\16\1\54\10\16\3\0"+
    "\2\16\12\0\5\16\1\55\10\16\3\0\2\16\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[899];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\1\1\4\11\13\1\2\11\1\1\2\0"+
    "\1\11\1\0\1\11\4\1\1\11\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[45];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  SmartCaseLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 19: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 20: break;
          case 3: 
            { return Types.LEFT_CURLY;
            } 
            // fall through
          case 21: break;
          case 4: 
            { yybegin(YYINITIAL); return Types.RIGHT_CURLY;
            } 
            // fall through
          case 22: break;
          case 5: 
            { return Types.EQUALS;
            } 
            // fall through
          case 23: break;
          case 6: 
            { return Types.SEMICOLON;
            } 
            // fall through
          case 24: break;
          case 7: 
            { return Types.IDENTIFIER;
            } 
            // fall through
          case 25: break;
          case 8: 
            { yybegin(YYINITIAL); return Types.TEXT;
            } 
            // fall through
          case 26: break;
          case 9: 
            { yybegin(PROCESS); return Types.TEXT;
            } 
            // fall through
          case 27: break;
          case 10: 
            { yybegin(PROCESS); return Types.RIGHT_CURLY;
            } 
            // fall through
          case 28: break;
          case 11: 
            { yybegin(COMMENT); return Types.SINGLE_LINE_COMMENT;
            } 
            // fall through
          case 29: break;
          case 12: 
            { return Types.STRING_VALUE;
            } 
            // fall through
          case 30: break;
          case 13: 
            { yybegin(INNER_COMMENT); return Types.SINGLE_LINE_COMMENT;
            } 
            // fall through
          case 31: break;
          case 14: 
            { return Types.FILE_REF;
            } 
            // fall through
          case 32: break;
          case 15: 
            { yybegin(TEST); return Types.TEST_KEYWORD;
            } 
            // fall through
          case 33: break;
          case 16: 
            { yybegin(PROCESS); return Types.TASK_KEYWORD;
            } 
            // fall through
          case 34: break;
          case 17: 
            { yybegin(PROCESS); return Types.FROM_KEYWORD;
            } 
            // fall through
          case 35: break;
          case 18: 
            { yybegin(PROCESS); return Types.PROCESS_KEYWORD;
            } 
            // fall through
          case 36: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
